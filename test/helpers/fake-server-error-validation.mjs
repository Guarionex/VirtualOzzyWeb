const failHandlingInternalServerErrorMessage = (stack, message) => `
    Something went wrong while handling the internal server error generated by this test - some possibilities include:

    1. \`boom.internal()\` was used in your production code, but an error object was not passed to it.
    2. A stub was set up to return a rejecting Promise, but the Promise did not reject with an error object (or nothing)
    3. The error caught by the controller was not generated by the test suite (ex: TypeError)

    Message: ${message}
    Stacktrace: ${stack}
`;

const unhandledInternalServerErrorMessage = `
    The 500 error generated by this test was not properly handled by the controller.

    Please make sure that any 500 errors are caught and passed to \`boom.internal()\`.
`;

const errorWasProperlyHandled = (error) => Object.keys(error).includes('stack');

const errorWasGeneratedByAutomaticValidation = (error) => error.stack.includes('dynamic-controllers-validation');

export const setupInternalServerErrorValidation = (fakeServer) => {
    fakeServer.ext('onPreResponse', (request, h) => {
        if (request.response.isBoom && request.response.output.statusCode === 500 && !request.response.stack.includes('jest')) {
            fail(failHandlingInternalServerErrorMessage(request.response.stack, request.response.message));
        }

        return h.continue;
    });
};

export const setupUnhandledErrorValidation = (fakeServer) => {
    fakeServer.events.on('request', (request, event, tags) => {
        if (tags.internal && event.error.isBoom && event.error.output.statusCode === 500 && !errorWasProperlyHandled(event.error) && !errorWasGeneratedByAutomaticValidation(event.error)) {
            fail(unhandledInternalServerErrorMessage);
        }
    });
};
